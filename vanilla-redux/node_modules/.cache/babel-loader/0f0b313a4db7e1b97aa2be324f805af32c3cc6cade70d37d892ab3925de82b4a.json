{"ast":null,"code":"import { legacy_createStore } from \"redux\";\nconst add = document.getElementById(\"add\");\nconst minus = document.getElementById(\"minus\");\nconst number = document.querySelector(\"span\");\nnumber.innerHTML = 0;\n\n// 오타 방지 및 유지보수성을 향상시키기 위해, string을 keep해주는 constant 생성\nconst ADD = \"ADD\";\nconst MINUS = \"MINUS\";\n\n// data를 modify하는 함수 (reducer, modifier) - state를 modify하는 것은 이 함수 안에서만 가능\nconst countModifier = function () {\n  let count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // count는 현재의 state\n  switch (action.type) {\n    case ADD:\n      return count + 1;\n    case MINUS:\n      return count - 1;\n    default:\n      return count;\n  }\n};\n\n// data를 저장하는 곳\n// 처음에 countModifier(reducer)를 통해 state를 initializing\nconst countStore = legacy_createStore(countModifier);\nconst onChange = () => {\n  number.innerHTML = countStore.getState();\n};\n\n// store를 구독(subscribe)\n// store에 변화가 있을 때마다 감지해서 onChange함수를 실행\ncountStore.subscribe(onChange);\n\n// // app의 data (즉 app이 저장하고 있는 state 중, countStore로 저장하고 있는 state를 출력)\n// console.log(countStore.getState());\n\nconst handleAdd = () => {\n  // countStore에 action을 내보내기 (message 전송 / countModifier(store)와 커뮤니케이션하기)\n  countStore.dispatch({\n    type: ADD\n  });\n};\nconst handleMinus = () => {\n  // countStore에 action을 내보내기 (message 전송 / countModifier(store)와 커뮤니케이션하기)\n  countStore.dispatch({\n    type: MINUS\n  });\n};\nadd.addEventListener(\"click\", handleAdd);\nminus.addEventListener(\"click\", handleMinus);","map":{"version":3,"names":["legacy_createStore","add","document","getElementById","minus","number","querySelector","innerHTML","ADD","MINUS","countModifier","count","action","type","countStore","onChange","getState","subscribe","handleAdd","dispatch","handleMinus","addEventListener"],"sources":["/Users/jimin/Dev/nomard-redux/vanilla-redux/src/index.js"],"sourcesContent":["import { legacy_createStore } from \"redux\";\n\nconst add = document.getElementById(\"add\");\nconst minus = document.getElementById(\"minus\");\nconst number = document.querySelector(\"span\");\n\nnumber.innerHTML = 0;\n\n// 오타 방지 및 유지보수성을 향상시키기 위해, string을 keep해주는 constant 생성\nconst ADD = \"ADD\";\nconst MINUS = \"MINUS\";\n\n// data를 modify하는 함수 (reducer, modifier) - state를 modify하는 것은 이 함수 안에서만 가능\nconst countModifier = (count = 0, action) => {\n  // count는 현재의 state\n  switch (action.type) {\n    case ADD:\n      return count + 1;\n    case MINUS:\n      return count - 1;\n    default:\n      return count;\n  }\n};\n\n// data를 저장하는 곳\n// 처음에 countModifier(reducer)를 통해 state를 initializing\nconst countStore = legacy_createStore(countModifier);\n\nconst onChange = () => {\n  number.innerHTML = countStore.getState();\n};\n\n// store를 구독(subscribe)\n// store에 변화가 있을 때마다 감지해서 onChange함수를 실행\ncountStore.subscribe(onChange);\n\n// // app의 data (즉 app이 저장하고 있는 state 중, countStore로 저장하고 있는 state를 출력)\n// console.log(countStore.getState());\n\nconst handleAdd = () => {\n  // countStore에 action을 내보내기 (message 전송 / countModifier(store)와 커뮤니케이션하기)\n  countStore.dispatch({ type: ADD });\n};\n\nconst handleMinus = () => {\n  // countStore에 action을 내보내기 (message 전송 / countModifier(store)와 커뮤니케이션하기)\n  countStore.dispatch({ type: MINUS });\n};\n\nadd.addEventListener(\"click\", handleAdd);\nminus.addEventListener(\"click\", handleMinus);\n"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,OAAO;AAE1C,MAAMC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC;AAC1C,MAAMC,KAAK,GAAGF,QAAQ,CAACC,cAAc,CAAC,OAAO,CAAC;AAC9C,MAAME,MAAM,GAAGH,QAAQ,CAACI,aAAa,CAAC,MAAM,CAAC;AAE7CD,MAAM,CAACE,SAAS,GAAG,CAAC;;AAEpB;AACA,MAAMC,GAAG,GAAG,KAAK;AACjB,MAAMC,KAAK,GAAG,OAAO;;AAErB;AACA,MAAMC,aAAa,GAAG,YAAuB;EAAA,IAAtBC,KAAK,uEAAG,CAAC;EAAA,IAAEC,MAAM;EACtC;EACA,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,GAAG;MACN,OAAOG,KAAK,GAAG,CAAC;IAClB,KAAKF,KAAK;MACR,OAAOE,KAAK,GAAG,CAAC;IAClB;MACE,OAAOA,KAAK;EAAC;AAEnB,CAAC;;AAED;AACA;AACA,MAAMG,UAAU,GAAGd,kBAAkB,CAACU,aAAa,CAAC;AAEpD,MAAMK,QAAQ,GAAG,MAAM;EACrBV,MAAM,CAACE,SAAS,GAAGO,UAAU,CAACE,QAAQ,EAAE;AAC1C,CAAC;;AAED;AACA;AACAF,UAAU,CAACG,SAAS,CAACF,QAAQ,CAAC;;AAE9B;AACA;;AAEA,MAAMG,SAAS,GAAG,MAAM;EACtB;EACAJ,UAAU,CAACK,QAAQ,CAAC;IAAEN,IAAI,EAAEL;EAAI,CAAC,CAAC;AACpC,CAAC;AAED,MAAMY,WAAW,GAAG,MAAM;EACxB;EACAN,UAAU,CAACK,QAAQ,CAAC;IAAEN,IAAI,EAAEJ;EAAM,CAAC,CAAC;AACtC,CAAC;AAEDR,GAAG,CAACoB,gBAAgB,CAAC,OAAO,EAAEH,SAAS,CAAC;AACxCd,KAAK,CAACiB,gBAAgB,CAAC,OAAO,EAAED,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}